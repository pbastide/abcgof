[{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pbastide.github.io/abcgof/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pbastide.github.io/abcgof/articles/gaussian_laplace.html","id":"toy-laplace---gaussian-example","dir":"Articles","previous_headings":"","what":"Toy Laplace - Gaussian Example","title":"Tutorial","text":"tutorial, use toy “Laplace - Gaussian” dataset (gaussian_laplace), embedded abcgof package. assume reference table drawn using following model m0m_0, uses Laplace distribution: m0: {θ=(μ,σ);μ∼Uniform(−5,5);σ∼Uniform(1,4);zi∼iidLaplace(μ,σ/2) 1≤≤d;y=L-moments(z;m);\\begin{equation*}    \\text{$m_0$: }       \\left\\{    \\begin{aligned}    \\theta &= (\\mu, \\sigma); \\\\    \\mu &\\sim \\mbox{Uniform}(-5,5); \\\\    \\sigma &\\sim \\mbox{Uniform}(1,4);\\\\     z_i &\\overset{iid}{\\sim} \\mbox{Laplace}(\\mu,\\sigma/\\sqrt{2}) \\mbox{ } 1 \\leq \\leq d;\\\\     y &= \\text{L-moments}(z; m);     \\end{aligned}     \\right. \\end{equation*} simulated vectors yy dimension d=350d=350 observed directly, instead summarized using first m=20m = 20 sample L-moments ratios using function salmu package lmom. simulated parameters reference table stored gaussian_laplace object, along simulation function. reference table 1000 rows. assume several observed vector statistics, come alternative model m1m_1 uses Gaussian model instead: m1: {θ=(μ,σ);μ∼Uniform(−5,5);σ∼Uniform(1,4);zi∼iidNormal(μ,σ2) 1≤≤d;y=L-moments(z;m),\\begin{equation*}    \\text{$m_1$: }    \\left\\{    \\begin{aligned}    \\theta &= (\\mu, \\sigma); \\\\     \\mu &\\sim \\mbox{Uniform}(-5,5); \\\\    \\sigma &\\sim \\mbox{Uniform}(1,4);\\\\     z_i &\\overset{iid}{\\sim} \\mbox{Normal}(\\mu,\\sigma^2) \\mbox{ } 1 \\leq \\leq d;\\\\     y &= \\text{L-moments}(z; m),     \\end{aligned}     \\right. \\end{equation*} d=350d=350 m=20m=20 . take observed values first 10 line dataset_gaussian dataset. Note models conditional mean μ\\mu standard deviations σ\\sigma raw data ziz_i, 1≤≤d1 \\leq \\leq d. can use PCA visualize reference statistics observed datasets.  Points reference table black, observed points orange. Laplace model heavier tails Gaussian model, rejecting Laplace model Gaussian observation can difficult, selected configuration. Visual inspection first two PC axis reveal observed orange points “outliers” compared simulated black points.","code":"library(abcgof) data(\"gaussian_laplace\") attach(gaussian_laplace) set.seed(1289) sim_params <- dataset_laplace$param sumstats <- dataset_laplace$sim sim_function <- dataset_laplace$sim.fun head(sim_params) #>              mu     scale #> [1,] -4.9483335 1.3464334 #> [2,]  1.2191817 1.9634809 #> [3,] -0.8857967 1.8678978 #> [4,]  0.7643363 1.9228813 #> [5,] -6.1565456 0.7325722 #> [6,]  2.9305190 1.7523864 head(sumstats) #>             l_1       l_2          t_3       t_4          t_5        t_6 #> [1,] -4.9344853 1.0271073  0.048835212 0.2226024  0.023550314 0.06886227 #> [2,]  1.1850598 1.4876990 -0.025005303 0.2211680  0.006650818 0.09179471 #> [3,] -0.7398060 1.4306265  0.008943995 0.2518546  0.001105052 0.11031211 #> [4,]  0.6918504 1.3695172  0.021150078 0.2022437 -0.011552312 0.05681890 #> [5,] -6.1508125 0.5601383  0.078462189 0.2592043  0.053934372 0.08787851 #> [6,]  2.9109914 1.4306385  0.027822062 0.2590423  0.043137700 0.11603878 #>               t_7        t_8           t_9       t_10         t_11       t_12 #> [1,]  0.020564264 0.04687520  0.0024936118 0.01915359 -0.009335724 0.00165149 #> [2,]  0.002258141 0.05415833 -0.0036408789 0.03663786 -0.004957587 0.02893470 #> [3,]  0.010106990 0.04970803  0.0119567379 0.02511239  0.008432557 0.01929786 #> [4,] -0.013831907 0.02429899  0.0009273301 0.02336813  0.005315742 0.02175305 #> [5,]  0.018261429 0.05200649 -0.0024320013 0.03566424 -0.008800341 0.03219378 #> [6,]  0.027837707 0.07015139  0.0123667142 0.04342968  0.012087101 0.03575983 #>               t_13         t_14          t_15         t_16         t_17 #> [1,] -2.148276e-03 -0.004010197 -0.0023968345 -0.004706272 -0.003220299 #> [2,] -2.901356e-03  0.019641051 -0.0007584820  0.014332985 -0.003596413 #> [3,]  3.379683e-06  0.015284317  0.0041880260  0.015000429  0.002820463 #> [4,] -2.891049e-03  0.009568189 -0.0049958836  0.011079600 -0.002835480 #> [5,] -1.020638e-02  0.026980234 -0.0087784110  0.020902127 -0.011993138 #> [6,]  7.539844e-03  0.027024252 -0.0002633797  0.016382516 -0.002023180 #>             t_18         t_19        t_20 #> [1,] 0.001801288  0.001034639 0.003131637 #> [2,] 0.007500890 -0.005243057 0.007801159 #> [3,] 0.010241943  0.007045583 0.011755243 #> [4,] 0.009010877 -0.009696633 0.005414873 #> [5,] 0.015172543 -0.014516576 0.013414395 #> [6,] 0.014394676 -0.003442754 0.013979047 sim_function #> function(params, ...) { #>     t(apply(params, 1, function(oneparam) lmom::samlmu(VGAM::rlaplace(350, location = oneparam[1], scale = oneparam[2]), nmom = 20))) #>   } #> <bytecode: 0x55f6a5580140> #> <environment: 0x55f6a55794f0> y_obs <- dataset_gaussian$sim[1:10, ] trainall <- rbind(sumstats, y_obs) ind <- c(rep(1, nrow(sumstats)), rep(2, nrow(y_obs))) res.pca <- stats::prcomp(trainall) plot(res.pca$x[, c(1,2)], col = c(\"black\", \"#D55E00\")[ind], pch = \"*\")"},{"path":"https://pbastide.github.io/abcgof/articles/gaussian_laplace.html","id":"pre-inference-prior-gof-test","dir":"Articles","previous_headings":"","what":"Pre-Inference Prior GoF Test","title":"Tutorial","text":"can first perform Prior Goodness fit test, based whole generated dataset sumstat. test checks null hypothesis observation drawn prior predictive distribution model m0m_0 used generate reference table. Rejecting test means reject null hypothesis data drawn prior predictive m0m_0, .e. model m0m_0 fails correctly account observation. default, function sets aside 100100 points reference table calibration, use remaining points compute outlier score. default outlier score “max-LOF” score k varying 2 20. , can see clearly reject observation, except number 6, upper confidence interval value 0.050.05 threshold. observations indeed different model null model, result expected. default, confidence intervals based asymptotic criterion, fast compute, can inaccurate. get better idea uncertainty estimation, can use bootstrap replicates: instead drawing calibration points reference table, repeat operation given number times, look distribution p-values. , confirms result observation 6 rejected prior GoF test. analyze observation using post-inference holdout GoF test.","code":"resgfit <- gfit(y_obs, sumstats) resgfit #> Prior GoF analysis #> Using the lof with k = max #> Number of lines in the reference table: 900 ; #> Number of calibration point: 100 ; #> Range of k values in the original object: k in [2, 20] ; #> Number of target observations: 10 ; #> Table of estimate, lower and upper 95% confidance interval pvalues: #>       estim       lwr       upr #>  [1,]  0.00 0.0000000 0.0000000 #>  [2,]  0.00 0.0000000 0.0000000 #>  [3,]  0.00 0.0000000 0.0000000 #>  [4,]  0.00 0.0000000 0.0000000 #>  [5,]  0.00 0.0000000 0.0000000 #>  [6,]  0.07 0.0199921 0.1200079 #>  [7,]  0.00 0.0000000 0.0000000 #>  [8,]  0.00 0.0000000 0.0000000 #>  [9,]  0.00 0.0000000 0.0000000 #> [10,]  0.00 0.0000000 0.0000000 #> Confidence intervals are based on asymptotic standard error estimation. resgfitboot <- gfit(y_obs[6, ], sumstats,                     nboot = 10,          ## For speed, only 10 replicates, but this should be increased.                     ncores = 1)          ## The number of cores for parallel computation can be increased. resgfitboot #> Prior GoF analysis #> Using the lof with k = max #> Number of lines in the reference table: 1000 ; #> Number of calibration point: 100 ; #> Range of k values in the original object: k in [2, 20] ; #> Number of target observations: 1 ; #> Table of median, lower and upper 95% HPD pvalues on 10 bootstrap replicates: #>      median  lwr  upr #> [1,]  0.045 0.01 0.12"},{"path":"https://pbastide.github.io/abcgof/articles/gaussian_laplace.html","id":"post-inference-holdout-gof-test","dir":"Articles","previous_headings":"","what":"Post-Inference Holdout GoF Test","title":"Tutorial","text":"prior GoF tests null hypothesis data comes prior distribution model m0m_0, broad assumption. frequentist setting, might want instead test whether true distribution generated data equal optimized likelihood model, inferred region observation. goal post-inference GoF test. avoid double use data, resort holdout version test: assume two independent observed datasets, drawn (unknown) distribution, use first replicate learn posterior, second replicate perform test. toy example, know true distribution observation 6, can easily generate replicate dataset, calling Gaussian simulation function parameters: , posterior learned simple rejection ABC algorithm, selecting rows reference table closest (Euclidean distance) first observation, re-simulating points model m0m_0 using parameters associated selected rows reference table. , post-inference test reject null assumption true distribution data comes model m0m_0. Note , sake speed demonstration, used reference table 10001000 particles, localized 10%10\\%. true applications, post-inference test, aim many simulated particles (1000010\\,000 higher, depending complexity model), well better localized (5%5\\% lower). prior GoF test, can use bootstrap procedure instead asymptotic method get better estimates uncertainty estimated p-value. works re-sampling calibration points among set selected rows reference table. conclusion similar, although uncertainty larger, due small number particles.","code":"y_obs_rep <- dataset_gaussian$sim.fun(dataset_gaussian$param[1:10, ]) reshpgfit <- hpgfit(y_obs[6, ],                      ## observed dataset                     y_obs_rep[6, ],                  ## replicate of the observed dataset                     sim_params, sumstats,            ## simulated parameters and reference table from m_0                     sim.fun = sim_function,          ## function to re-simulate from m_0 given parameters                     method = \"rejection\", eps = 0.1) ## rejection method with epsilon = 10% reshpgfit #> Holdout Posterior GoF analysis #> Using the lof with k = max #> Number of lines in the reference table: 1000 ; #> Number of lines in the posterior table: 100 (eps=10%); #> Number of calibration point: 50 (split=50%); #> Range of k values in the original object: k in [2, 20] ; #> Number of target observations: 1 ; #> Table of estimate, lower and upper 95% confidance interval pvalues: #>     estim lwr upr #> max     0   0   0 #> Confidence intervals are based on asymptotic standard error estimation. reshpgfitboot <- hpgfit(y_obs[6, ],                      ## observed dataset                         y_obs_rep[6, ],                  ## replicate of the observed dataset                         sim_params, sumstats,            ## simulated parameters and reference table from m_0                         sim.fun = sim_function,          ## function to re-simulate from m_0 given parameters                         method = \"rejection\", eps = 0.1, ## rejection method with epsilon = 10%                         nboot = 50,                      ## For speed, only 50 replicates, but this should be increased.                         ncores = 1)                      ## The number of cores for parallel computation can be increased. reshpgfitboot #> Holdout Posterior GoF analysis #> Using the lof with k = max #> Number of lines in the reference table: 1000 ; #> Number of lines in the posterior table: 100 (eps=10%); #> Number of calibration point: 50 (split=50%); #> Range of k values in the original object: k in [2, 20] ; #> Number of target observations: 1 ; #> Table of median, lower and upper 95% HPD pvalues on 50 bootstrap replicates: #>      median lwr  upr #> [1,]   0.02   0 0.04"},{"path":"https://pbastide.github.io/abcgof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Bastide. Author, maintainer. Arnaud Estoup. Author. Guillaume Le Mailloux. Author. Jean-Michel Marin. Author.","code":""},{"path":"https://pbastide.github.io/abcgof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bastide P, Estoup , Le Mailloux G, Marin J (2024). abcgof: Goodness fit ABC. R package version 0.0.0.9000, https://pbastide.github.io/abcgof/.","code":"@Manual{,   title = {abcgof: Goodness of fit for ABC},   author = {Paul Bastide and Arnaud Estoup and Guillaume {Le Mailloux} and Jean-Michel Marin},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://pbastide.github.io/abcgof/}, }"},{"path":"https://pbastide.github.io/abcgof/index.html","id":"abcgof","dir":"","previous_headings":"","what":"Goodness of fit for ABC","title":"Goodness of fit for ABC","text":"Functions Goodness Fit (GoF) tests simulation based inference.","code":""},{"path":"https://pbastide.github.io/abcgof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Goodness of fit for ABC","text":"development version can installed GitHub using remotes package: WARNING: development version (v0.0.1). API likely change.","code":"install.packages(\"remotes\") remotes::install_github(repo = \"pbastide/abcgof\", ref = \"main\")"},{"path":"https://pbastide.github.io/abcgof/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Goodness of fit for ABC","text":"See package documentation (references vignettes) : https://pbastide.github.io/abcgof/. (Built pkgdown).","code":""},{"path":"https://pbastide.github.io/abcgof/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Goodness of fit for ABC","text":"Le Mailloux G., Bastide, P., Marin, J-M., Estoup, . (2024+), Goodness Fit Bayesian Generative Models Applications Population Genetics.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/add_score_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a diagnostic table — add_score_max","title":"Format a diagnostic table — add_score_max","text":"Format diagnostic table, add max score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/add_score_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a diagnostic table — add_score_max","text":"","code":"add_score_max(diagnostic.table, k_range)"},{"path":"https://pbastide.github.io/abcgof/reference/add_score_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a diagnostic table — add_score_max","text":"diagnostic.table diagnostic table, column different diagnostics. k_range range k values restrict max","code":""},{"path":"https://pbastide.github.io/abcgof/reference/add_score_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a diagnostic table — add_score_max","text":"formatted diagnostic table","code":""},{"path":"https://pbastide.github.io/abcgof/reference/calDIST.html","id":null,"dir":"Reference","previous_headings":"","what":"Distances of a vector to rows of a matrix — calDIST","title":"Distances of a vector to rows of a matrix — calDIST","text":"Distances vector rows matrix","code":""},{"path":"https://pbastide.github.io/abcgof/reference/calDIST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distances of a vector to rows of a matrix — calDIST","text":"","code":"calDIST(y, x)"},{"path":"https://pbastide.github.io/abcgof/reference/calDIST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distances of a vector to rows of a matrix — calDIST","text":"y vector numeric values x matrix row vectors","code":""},{"path":"https://pbastide.github.io/abcgof/reference/calDIST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distances of a vector to rows of a matrix — calDIST","text":"vector distances y row x","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_param_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"find transform functions — check_param_transform","title":"find transform functions — check_param_transform","text":"find transform functions","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_param_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find transform functions — check_param_transform","text":"","code":"check_param_transform(   param,   param_transform,   param_lower_bound,   param_upper_bound )"},{"path":"https://pbastide.github.io/abcgof/reference/check_param_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find transform functions — check_param_transform","text":"param matrix parameters matching sumstat. param_transform named vector function, parameter attributes transformation function. function must one \"none\" (transformation), \"log\" \"logit\". \"logit\", upper lower values taken param_lower_bound param_upper_bound arguments. vector length 1, recycled parameters. Default \"none\": transformation parameter. param_lower_bound named vector lower bounds parameter param. vector length 1, recycled parameters. Default -Inf: lower bound. param_upper_bound named vector lower bounds parameter param. vector length 1, recycled parameters. Default Inf: upper bound.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_param_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find transform functions — check_param_transform","text":"list, : transform vector transform parameter back_transform vector back transform parameter.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_replica.html","id":null,"dir":"Reference","previous_headings":"","what":"Check replicate — check_replica","title":"Check replicate — check_replica","text":"Check matrix replicate.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_replica.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check replicate — check_replica","text":"","code":"check_replica(target, target.replica)"},{"path":"https://pbastide.github.io/abcgof/reference/check_replica.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check replicate — check_replica","text":"target target matrix target.replica sumstat matrix","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_replica.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check replicate — check_replica","text":"nothing","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_sumstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check sumstat — check_sumstat","title":"Check sumstat — check_sumstat","text":"Format sumstat matrix.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_sumstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check sumstat — check_sumstat","text":"","code":"check_sumstat(target, sumstat)"},{"path":"https://pbastide.github.io/abcgof/reference/check_sumstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check sumstat — check_sumstat","text":"target target matrix sumstat sumstat matrix","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_sumstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check sumstat — check_sumstat","text":"formatted sumstat matrix.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Check target — check_target","title":"Check target — check_target","text":"Format target matrix.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check target — check_target","text":"","code":"check_target(target)"},{"path":"https://pbastide.github.io/abcgof/reference/check_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check target — check_target","text":"target target matrix","code":""},{"path":"https://pbastide.github.io/abcgof/reference/check_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check target — check_target","text":"formatted target matrix.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power — compute_power","title":"Compute power — compute_power","text":"Computes power test.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power — compute_power","text":"","code":"compute_power(gfit_obj, level = 0.05)"},{"path":"https://pbastide.github.io/abcgof/reference/compute_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power — compute_power","text":"gfit_obj object gfit postgfit functions. level level test. Default 0.05.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power — compute_power","text":"object, added power slot.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_power_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power — compute_power_sd","title":"Compute power — compute_power_sd","text":"Computes approximate standard deviation power. estimate ignores variability pvalues , probably small.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_power_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power — compute_power_sd","text":"","code":"compute_power_sd(gfit_obj)"},{"path":"https://pbastide.github.io/abcgof/reference/compute_power_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power — compute_power_sd","text":"gfit_obj object gfit postgfit functions.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_power_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power — compute_power_sd","text":"object, added pow_sd slot.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_pval_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute power — compute_pval_sd","title":"Compute power — compute_pval_sd","text":"Computes approximate standard deviation pvalues","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_pval_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute power — compute_pval_sd","text":"","code":"compute_pval_sd(gfit_obj)"},{"path":"https://pbastide.github.io/abcgof/reference/compute_pval_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute power — compute_pval_sd","text":"gfit_obj object gfit postgfit functions.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/compute_pval_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute power — compute_pval_sd","text":"object, added pval_sd slot.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/format_diagnostic.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a diagnostic table — format_diagnostic","title":"Format a diagnostic table — format_diagnostic","text":"Format diagnostic table, add max score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/format_diagnostic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a diagnostic table — format_diagnostic","text":"","code":"format_diagnostic(diagnostic.table, scores)"},{"path":"https://pbastide.github.io/abcgof/reference/format_diagnostic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a diagnostic table — format_diagnostic","text":"diagnostic.table diagnostic table, column different diagnostics. scores different scores per diagnostic.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/format_diagnostic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a diagnostic table — format_diagnostic","text":"formatted diagnostic table","code":""},{"path":"https://pbastide.github.io/abcgof/reference/freqgfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-Computed Holdout Frequentist Goodness of Fit Test — freqgfit","title":"Pre-Computed Holdout Frequentist Goodness of Fit Test — freqgfit","text":"function similar hpgfit(), works rejection method, datasets pre-computed replicates. likely DEPRECATED stable versions package. function performs post-inference holdout Goodness Fit (GoF) test, checks whether can reject hypothesis target model particles sumstat matrix. works first approximating posterior distribution using localization parameter eps rejection method (see documentation abc::abc). draws fraction split reference table sumstat calibration, compares score target distribution scores calibration points.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/freqgfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-Computed Holdout Frequentist Goodness of Fit Test — freqgfit","text":"","code":"freqgfit(   target,   target.replica,   sumstat,   sumstat.replica,   score = c(\"lof\", \"kNN\"),   k = c(2, 3, 5, 8, 14, 20),   k_range = range(k),   eps = 0.01,   split = 0.5,   norm = sd,   ncores = 1 )"},{"path":"https://pbastide.github.io/abcgof/reference/freqgfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-Computed Holdout Frequentist Goodness of Fit Test — freqgfit","text":"target matrix observations, dimension Nobs x Nstats. target.replica matrix observations, dimension Nobs x Nstats. line replicate target come model one used line reference table. sumstat matrix summary statistics training set, dimension Ntrain x Nstats. sumstat.replica matrix replicate summary statistics training set, dimension Ntrain x Nstats. line replicate summary statistic simulated parameters one used line reference table. score score use calling outliers. Can \"lof\", \"kNN\", . k kth-distance used calculate LOFs kNNs. k can vector contains multiple k values based score needs calculated. k_range vector min max values k using \"LOF max\" score (see Details). eps proportion data points used approximate posterior distribution reference table around observation point. Default 0.01. split proportion posterior used calibration. Default 0.5. norm normalization function. Default sd. ncores number cores parallel computations.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/freqgfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-Computed Holdout Frequentist Goodness of Fit Test — freqgfit","text":"score, list : pval matrix p-values test data (rows), possible value k (nboot=1), array matrices (nboot>1). n.ref number particles reference dataset (number rows sumstat). n.calib number particles used calibration. eps localization fraction. split fraction data used calibration. k_range min max values k using \"LOF max\" score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/freqgfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pre-Computed Holdout Frequentist Goodness of Fit Test — freqgfit","text":"Le Mailloux G., Bastide, P., Marin, J-M., Estoup, . (2024+), Goodness Fit Bayesian Generative Models Applications Population Genetics. Markus M. Breunig, Hans-Peter Kriegel, Raymond T. Ng, Jörg Sander. 2000. LOF: identifying density-based local outliers. SIGMOD Rec. 29, 2 (June 2000), 93–104. https://doi.org/10.1145/335191.335388","code":""},{"path":[]},{"path":"https://pbastide.github.io/abcgof/reference/gaussian_laplace.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian Laplace Toy dataset — gaussian_laplace","title":"Gaussian Laplace Toy dataset — gaussian_laplace","text":"dataset containing two reference tables, simulated using either Gaussian Laplace model.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gaussian_laplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian Laplace Toy dataset — gaussian_laplace","text":"","code":"gaussian_laplace"},{"path":"https://pbastide.github.io/abcgof/reference/gaussian_laplace.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gaussian Laplace Toy dataset — gaussian_laplace","text":"Two lists dataset_gaussian dataset_laplace, entries: param matrix 100,000 rows 2 columns parameters used simulations sim data frame simulated summary statistics (350 columns) 100,000 rows param matrix. sim.fun simulation function used.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gaussian_laplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian Laplace Toy dataset — gaussian_laplace","text":"dataset contains 1000 lines. Parameters mu sigma drawn uniformly -10 10, 1 4, respectively. set parameter: Gaussian vector size 350 simulated mean mu standard deviation sigma using base function stats::rnorm. Laplace vector size 350 simulated location mu scale sigma/sqrt(2) using function VGAM::rlaplace. , vector, set 20 summary statistics computed, taking 20 first normalized L-moments using function lmom::samlmu.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/get_p_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Get p value from diagnostic — get_p_val","title":"Get p value from diagnostic — get_p_val","text":"Computes empirical p values set scores.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/get_p_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get p value from diagnostic — get_p_val","text":"","code":"get_p_val(diagnostic.calib, diagnostic.test)"},{"path":"https://pbastide.github.io/abcgof/reference/get_p_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get p value from diagnostic — get_p_val","text":"diagnostic.calib matrix calibration scores, size Ncalib x Nscores. diagnostic.test matrix test scores, size Ntest x Nscores.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/get_p_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get p value from diagnostic — get_p_val","text":"matrix p values, size Ntest x Nscores.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/get_p_val_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Get p value from diagnostic — get_p_val_vec","title":"Get p value from diagnostic — get_p_val_vec","text":"Computes empirical p values set scores.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/get_p_val_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get p value from diagnostic — get_p_val_vec","text":"","code":"get_p_val_vec(diagnostic.calib, diagnostic.test)"},{"path":"https://pbastide.github.io/abcgof/reference/get_p_val_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get p value from diagnostic — get_p_val_vec","text":"diagnostic.calib matrix calibration scores, size Ncalib x Nscores. diagnostic.test vector test scores, length Nscores.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/get_p_val_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get p value from diagnostic — get_p_val_vec","text":"vector p values length Nscores.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior Goodness of Fit test — gfit","title":"Prior Goodness of Fit test — gfit","text":"function performs prior Goodness Fit (GoF) test, checks whether can reject hypothesis target model particles sumstat matrix. works sub-sampling nb.replicate points reference table sumstat, comparing score target distribution scores calibration points.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior Goodness of Fit test — gfit","text":"","code":"gfit(   target,   sumstat,   nb.replicate = 100,   score = c(\"lof\", \"kNN\"),   k = c(2, 3, 5, 8, 14, 20),   k_range = range(k),   norm = sd,   ncores = 1,   nboot = 1 )  # S3 method for class 'gfit' print(x, ...)  # S3 method for class 'gfit' summary(object, score = \"lof\", k = \"max\", level = 0.95, ...)  # S3 method for class 'gfitsummary' print(x, ...)"},{"path":"https://pbastide.github.io/abcgof/reference/gfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior Goodness of Fit test — gfit","text":"target matrix observations, dimension Nobs x Nstats. sumstat matrix summary statistics training set, dimension Ntrain x Nstats. nb.replicate number replicates draw training set calibration p value. score score use calling outliers. Can \"lof\", \"kNN\", . k kth-distance used calculate LOFs kNNs. k can vector contains multiple k values based score needs calculated. k_range vector min max values k using \"LOF max\" score (see Details). norm normalization function. Default sd. ncores number cores parallel computations. nboot number bootstrap replicates (see Details). Default 1: bootstrap replicate. x object used select method. ... arguments passed methods. object object summary desired. level level confidence interval","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior Goodness of Fit test — gfit","text":"object class gfit. score, contains list : score.calib matrix LOF scores calibration data (rows), possible value k (nboot=1). score.test matrix LOF scores test data (rows), possible value k (nboot=1). pval matrix p-values test data (rows), possible value k (nboot=1), array matrices (nboot>1). n.ref number particles reference dataset (number rows sumstat). n.calib number particles used calibration (equal nb.replicate). n.boot number bootstrap replicates. k_range min max values k using \"LOF max\" score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prior Goodness of Fit test — gfit","text":"LOF kNN scores computations rely function kNN dbscan package. target can matrix, case GoF test performed independently observation vector (rows matrix). using \"LOF max\" statistics, maximum LOF score k_range taken calibration observation points. nboot>1, test performed several times, drawing nboot different sets nb.replicates calibration points. Highest Density Intervals computed using hdi function package HDInterval.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prior Goodness of Fit test — gfit","text":"Le Mailloux G., Bastide, P., Marin, J-M., Estoup, . (2024+), Goodness Fit Bayesian Generative Models Applications Population Genetics. Markus M. Breunig, Hans-Peter Kriegel, Raymond T. Ng, Jörg Sander. 2000. LOF: identifying density-based local outliers. SIGMOD Rec. 29, 2 (June 2000), 93–104. https://doi.org/10.1145/335191.335388","code":""},{"path":[]},{"path":"https://pbastide.github.io/abcgof/reference/gfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior Goodness of Fit test — gfit","text":"","code":"data(gaussian_laplace) ## 1000 simulations from the Laplace dataset sumstat <- gaussian_laplace$dataset_laplace$sim ## 10 observations from the Gaussian dataset target <- gaussian_laplace$dataset_gaussian$sim[1:10, ]  ## Apply gfit resgfit <- gfit(target, sumstat) resgfit #> Prior GoF analysis #> Using the lof with k = max #> Number of lines in the reference table: 900 ; #> Number of calibration point: 100 ; #> Range of k values in the original object: k in [2, 20] ; #> Number of target observations: 10 ; #> Table of estimate, lower and upper 95% confidance interval pvalues: #>       estim        lwr       upr #>  [1,]  0.00 0.00000000 0.0000000 #>  [2,]  0.00 0.00000000 0.0000000 #>  [3,]  0.00 0.00000000 0.0000000 #>  [4,]  0.01 0.00000000 0.0295014 #>  [5,]  0.00 0.00000000 0.0000000 #>  [6,]  0.12 0.05630871 0.1836913 #>  [7,]  0.00 0.00000000 0.0000000 #>  [8,]  0.00 0.00000000 0.0000000 #>  [9,]  0.00 0.00000000 0.0000000 #> [10,]  0.00 0.00000000 0.0000000 #> Confidence intervals are based on asymptotic standard error estimation.  ## Apply gfit with bootstrap resgfit <- gfit(target, sumstat, nboot = 10) # nboot should be larger resgfit #> Prior GoF analysis #> Using the lof with k = max #> Number of lines in the reference table: 1000 ; #> Number of calibration point: 100 ; #> Range of k values in the original object: k in [2, 20] ; #> Number of target observations: 10 ; #> Table of median, lower and upper 95% HPD pvalues on 10 bootstrap replicates: #>       median lwr upr #>  [1,]   0.00   0 0.0 #>  [2,]   0.00   0 0.0 #>  [3,]   0.00   0 0.0 #>  [4,]   0.00   0 0.0 #>  [5,]   0.00   0 0.0 #>  [6,]   0.05   0 0.1 #>  [7,]   0.00   0 0.0 #>  [8,]   0.00   0 0.0 #>  [9,]   0.00   0 0.0 #> [10,]   0.00   0 0.0"},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.freq.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Internal function compute GoF using LOF scores. data already formatted normalized. Unless advanced user, probably use freqgfit.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"gof.fit.freq(   data.test.obs,   data.test.new,   data.ref,   data.ref.replica,   k = c(2, 3, 5, 8, 14, 20),   k_range = range(k),   eps = 1/100,   split = 0.5,   score = c(\"lof\", \"kNN\"),   ncores = 1 )"},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"data.test.obs normalized matrix observations, dimension Nobs x Nstats. data.test.new normalized matrix new (replicated) observations, dimension Nobs x Nstats. data.ref normalized matrix reference summary statistics training set, dimension Ntrain x Nstats. data.ref.replica normalized matrix reference replicate summary statistics training set, dimension Ntrain x Nstats. line replicate summary statistic simulated parameters one used line reference table. k kth-distance used calculate LOFs kNNs. k can vector contains multiple k values based score needs calculated. k_range vector min max values k using \"LOF max\" score (see Details). eps proportion data points used approximate posterior distribution reference table around observation point. Default 0.01. split proportion posterior used calibration. Default 0.5. score score use calling outliers. Can \"lof\", \"kNN\", . ncores number cores parallel computations.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"score, list, pval matrix p-values test data (rows), possible value k.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.holdout.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Internal function compute GoF using LOF scores. data already formatted normalized. Unless advanced user, probably use hpgfit.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.holdout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"gof.fit.holdout(   data.test.obs,   data.test.new,   data.param,   data.ref,   sim.fun,   method = c(\"loclinear\", \"ridge\", \"rejection\"),   kernel = c(\"epanechnikov\", \"rectangular\", \"gaussian\", \"triangular\", \"biweight\",     \"cosine\"),   lambda = c(1e-04, 0.001, 0.01),   trans.fun = function(x) return(x),   back.trans.fun = function(x) return(x),   k = c(2, 3, 5, 8, 14, 20),   k_range = range(k),   eps = 1/100,   split = 0.5,   normvec,   score = c(\"lof\", \"kNN\"),   ncores = 1,   nboot = 1,   ... )"},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.holdout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"data.test.obs normalized matrix observations, dimension Nobs x Nstats. data.test.new normalized matrix new (replicated) observations, dimension Nobs x Nstats. data.param matrix parameters matching sumstat. data.ref normalized matrix reference summary statistics training set, dimension Ntrain x Nstats. sim.fun function , matrix parameters (size nsim x nparams), returns simulated matrix sumstats (size nsim x nsumstats). method one \"rejection\" (default), \"loclinear\" \"ridge\". kernel \"loclinear\" \"ridge\", kernel used. lambda \"ridge\", lambda penalties used ridge regression. median predictions various lambdas used. Default lambda = c(0.0001, 0.001, 0.01). trans.fun transformation function, takes matrix parameters, return transformed matrix parameters. back.trans.fun transformation function, takes transformed matrix parameters, return matrix parameters original space. k kth-distance used calculate LOFs kNNs. k can vector contains multiple k values based score needs calculated. k_range vector min max values k using \"LOF max\" score (see Details). eps proportion data points used approximate posterior distribution reference table around observation point. Default 0.01. split proportion posterior used calibration. Default 0.5. normvec column normalization values. score score use calling outliers. Can \"lof\", \"kNN\", . ncores number cores parallel computations. nboot number bootstrap replicates (see Details). Default 1: bootstrap replicate. ... arguments passed sim.fun.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.holdout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"score, list, pval matrix p-values test data (rows), possible value k.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Internal function compute GoF using lof mean kNN scores. data already formatted normalized. Unless advanced user, probably use gfit.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"gof.fit(   data.test,   data.ref,   data.calib,   k = c(2, 3, 5, 8, 14, 20),   k_range = range(k),   score = c(\"lof\", \"kNN\"),   ncores = 1,   kdist = NULL,   kid = NULL )"},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"data.test normalized matrix observations, dimension Nobs x Nstats. data.ref normalized matrix reference summary statistics training set, dimension Ntrain x Nstats. data.calib normalized matrix reference summary statistics training set, dimension Ncalib x Nstats. k kth-distance used calculate LOFs kNNs. k can vector contains multiple k values based score needs calculated. k_range vector min max values k using \"LOF max\" score (see Details). score score use calling outliers. Can \"lof\", \"kNN\", . ncores number cores parallel computations. kdist (optional) pre-computed matrix k-distances: kdist[,k] contain distance particle data.ref matrix k-th neighbor. See kNN. kid (optional) pre-computed matrix k-ids: kid[,k] contain id k-th -neighbor particle data.ref matrix. See kNN.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"object class gfit. score, contains list : score.calib matrix LOF scores calibration data (rows), possible value k (nboot=1). score.test matrix LOF scores test data (rows), possible value k (nboot=1). pval matrix p-values test data (rows), possible value k (nboot=1), array matrices (nboot>1). n.ref number particles reference dataset (number rows sumstat). n.calib number particles used calibration (equal nb.replicate). n.boot number bootstrap replicates. k_range min max values k using \"LOF max\" score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"","text":"Matrices kdist kid can obtained call kNN data.ref. needed lof score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.post.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Internal function compute posterior GoF. data already formatted normalized. Unless advanced user, probably use postgfit.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"gof.fit.post(   data.test,   data.calib,   data.ref,   data.ref.replica,   k = c(2, 3, 5, 8, 14, 20),   k_range = range(k),   eps = 1/100,   score = c(\"lof\", \"kNN\"),   ncores = 1 )"},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"data.test normalized matrix observations, dimension Nobs x Nstats. data.calib normalized matrix reference summary statistics training set, dimension Ncalib x Nstats. data.ref normalized matrix reference summary statistics training set, dimension Ntrain x Nstats. data.ref.replica normalized matrix reference replicate summary statistics training set, dimension Ntrain x Nstats. line replicate summary statistic simulated parameters one used line reference table. k kth-distance used calculate LOFs kNNs. k can vector contains multiple k values based score needs calculated. k_range vector min max values k using \"LOF max\" score (see Details). eps proportion data points used approximate posterior distribution reference table around observation point. Default 0.01. score score use calling outliers. Can \"lof\", \"kNN\", . ncores number cores parallel computations.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/gof.fit.post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"score, list : score.calib matrix LOF scores calibration data (rows), possible value k. score.test matrix LOF scores test data (rows), possible value k. pval matrix p-values test data (rows), possible value k. n.ref number particles reference dataset (number rows sumstat). n.calib number particles used calibration (equal nb.replicate). k_range min max values k using \"LOF max\" score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/hpgfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Holdout Frequentist Goodness of Fit Test — hpgfit","title":"Holdout Frequentist Goodness of Fit Test — hpgfit","text":"function performs post-inference holdout Goodness Fit (GoF) test, checks whether can reject hypothesis target model particles sumstat matrix. works first approximating posterior distribution using localization parameter eps one rejection, local linear ridge regression methods (see documentation abc::abc). draws fraction split reference table sumstat calibration, compares score target distribution scores calibration points.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/hpgfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Holdout Frequentist Goodness of Fit Test — hpgfit","text":"","code":"hpgfit(   target,   target.replica,   param,   sumstat,   sim.fun,   method = c(\"rejection\", \"loclinear\", \"ridge\"),   kernel = c(\"epanechnikov\", \"rectangular\", \"gaussian\", \"triangular\", \"biweight\",     \"cosine\"),   lambda = c(1e-04, 0.001, 0.01),   param_transform = \"none\",   param_lower_bound = -Inf,   param_upper_bound = Inf,   trans.fun = NULL,   back.trans.fun = NULL,   score = c(\"lof\", \"kNN\"),   k = c(2, 3, 5, 8, 14, 20),   k_range = range(k),   eps = 0.01,   split = 0.5,   norm = sd,   ncores = 1,   nboot = 1,   ... )  # S3 method for class 'hpgfit' print(x, ...)  # S3 method for class 'hpgfit' summary(object, score = \"lof\", k = \"max\", level = 0.95, ...)  # S3 method for class 'hpgfitsummary' print(x, ...)"},{"path":"https://pbastide.github.io/abcgof/reference/hpgfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Holdout Frequentist Goodness of Fit Test — hpgfit","text":"target matrix observations, dimension Nobs x Nstats. target.replica matrix observations, dimension Nobs x Nstats. line replicate target come model one used line reference table. param matrix parameters matching sumstat. sumstat matrix summary statistics training set, dimension Ntrain x Nstats. sim.fun function , matrix parameters (size nsim x nparams), returns simulated matrix sumstats (size nsim x nsumstats). method one \"rejection\" (default), \"loclinear\" \"ridge\". kernel \"loclinear\" \"ridge\", kernel used. lambda \"ridge\", lambda penalties used ridge regression. median predictions various lambdas used. Default lambda = c(0.0001, 0.001, 0.01). param_transform named vector function, parameter attributes transformation function. function must one \"none\" (transformation), \"log\" \"logit\". \"logit\", upper lower values taken param_lower_bound param_upper_bound arguments. vector length 1, recycled parameters. Default \"none\": transformation parameter. param_lower_bound named vector lower bounds parameter param. vector length 1, recycled parameters. Default -Inf: lower bound. param_upper_bound named vector lower bounds parameter param. vector length 1, recycled parameters. Default Inf: upper bound. trans.fun custom transformation function, takes input whole vector parameters. specified, override default logit transform. trans.fun back.trans.fun must specified. Default NULL. back.trans.fun custom back transformation function, takes input whole vector parameters. specified, override default logit transform. trans.fun back.trans.fun must specified. Default NULL. score score use calling outliers. Can \"lof\", \"kNN\", . k kth-distance used calculate LOFs kNNs. k can vector contains multiple k values based score needs calculated. k_range vector min max values k using \"LOF max\" score (see Details). eps proportion data points used approximate posterior distribution reference table around observation point. Default 0.01. split proportion posterior used calibration. Default 0.5. norm normalization function. Default sd. ncores number cores parallel computations. nboot number bootstrap replicates (see Details). Default 1: bootstrap replicate. ... arguments passed sim.fun. x object used select method. object object summary desired. level level confidence interval","code":""},{"path":"https://pbastide.github.io/abcgof/reference/hpgfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Holdout Frequentist Goodness of Fit Test — hpgfit","text":"object class hpgfit. score, contains list : pval matrix p-values test data (rows), possible value k (nboot=1), array matrices (nboot>1). n.ref number particles reference dataset (number rows sumstat). n.calib number particles used calibration. eps localization fraction. split fraction data used calibration. n.boot number bootstrap replicates. k_range min max values k using \"LOF max\" score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/hpgfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Holdout Frequentist Goodness of Fit Test — hpgfit","text":"LOF kNN scores computations rely function kNN dbscan package. target can matrix, case GoF test performed independently observation vector (rows matrix). using \"LOF max\" statistics, maximum LOF score k_range taken calibration observation points. nboot>1, test performed several times, drawing nboot different sets calibration points (fixed) posterior. Highest Density Intervals computed using hdi function package HDInterval.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/hpgfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Holdout Frequentist Goodness of Fit Test — hpgfit","text":"Le Mailloux G., Bastide, P., Marin, J-M., Estoup, . (2024+), Goodness Fit Bayesian Generative Models Applications Population Genetics. Markus M. Breunig, Hans-Peter Kriegel, Raymond T. Ng, Jörg Sander. 2000. LOF: identifying density-based local outliers. SIGMOD Rec. 29, 2 (June 2000), 93–104. https://doi.org/10.1145/335191.335388","code":""},{"path":[]},{"path":"https://pbastide.github.io/abcgof/reference/hpgfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Holdout Frequentist Goodness of Fit Test — hpgfit","text":"","code":"data(gaussian_laplace)  ## 1000 simulations from the Laplace dataset sumstat <- gaussian_laplace$dataset_laplace$sim ## Matching parameters and simulation function param <- gaussian_laplace$dataset_laplace$param sim_laplace <- gaussian_laplace$dataset_laplace$sim.fun  ## 10 observations from the Gaussian dataset target <- gaussian_laplace$dataset_gaussian$sim[1:10, ] ## 10 replicate obsertvations from the Gaussian dataset param_target <- gaussian_laplace$dataset_gaussian$param[1:10, ] target.rep <- gaussian_laplace$dataset_gaussian$sim.fun(param_target)  ## Apply hpgfit res <- hpgfit(target, target.rep, param, sumstat,               sim.fun = sim_laplace,               method = \"rejection\", eps = 0.1) # rejection method res #> Holdout Posterior GoF analysis #> Using the lof with k = max #> Number of lines in the reference table: 1000 ; #> Number of lines in the posterior table: 100 (eps=10%); #> Number of calibration point: 50 (split=50%); #> Range of k values in the original object: k in [2, 20] ; #> Number of target observations: 10 ; #> Table of estimate, lower and upper 95% confidance interval pvalues: #>       estim        lwr        upr #>  [1,]  0.02 0.00000000 0.05880531 #>  [2,]  0.02 0.00000000 0.05880531 #>  [3,]  0.04 0.00000000 0.09431612 #>  [4,]  0.00 0.00000000 0.00000000 #>  [5,]  0.10 0.01684577 0.18315423 #>  [6,]  0.00 0.00000000 0.00000000 #>  [7,]  0.00 0.00000000 0.00000000 #>  [8,]  0.02 0.00000000 0.05880531 #>  [9,]  0.20 0.08912769 0.31087231 #> [10,]  0.00 0.00000000 0.00000000 #> Confidence intervals are based on asymptotic standard error estimation.  ## Apply hpgfit with bootstrap res <- hpgfit(target, target.rep, param, sumstat,               sim.fun = sim_laplace,               method = \"rejection\", eps = 0.1,               nboot = 10) # nboot should be larger res #> Holdout Posterior GoF analysis #> Using the lof with k = max #> Number of lines in the reference table: 1000 ; #> Number of lines in the posterior table: 100 (eps=10%); #> Number of calibration point: 50 (split=50%); #> Range of k values in the original object: k in [2, 20] ; #> Number of target observations: 10 ; #> Table of median, lower and upper 95% HPD pvalues on 10 bootstrap replicates: #>       median  lwr  upr #>  [1,]   0.00 0.00 0.00 #>  [2,]   0.01 0.00 0.02 #>  [3,]   0.02 0.00 0.04 #>  [4,]   0.00 0.00 0.02 #>  [5,]   0.02 0.00 0.12 #>  [6,]   0.03 0.00 0.06 #>  [7,]   0.00 0.00 0.00 #>  [8,]   0.10 0.00 0.30 #>  [9,]   0.19 0.04 0.36 #> [10,]   0.01 0.00 0.08"},{"path":"https://pbastide.github.io/abcgof/reference/kdist.new.html","id":null,"dir":"Reference","previous_headings":"","what":"New k-dist — kdist.new","title":"New k-dist — kdist.new","text":"Compute new k-dist point reference data set. uses old k-distances distance new point.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/kdist.new.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New k-dist — kdist.new","text":"","code":"kdist.new(old.kdist, old.belowkdist, dist.new)"},{"path":"https://pbastide.github.io/abcgof/reference/kdist.new.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New k-dist — kdist.new","text":"old.kdist k-dist computed without new points. old.belowkdist (k-1)-dist computed without new points. dist.new distance new point","code":""},{"path":"https://pbastide.github.io/abcgof/reference/kdist.new.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"New k-dist — kdist.new","text":"new k-dist including new point.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/lof.internal.html","id":null,"dir":"Reference","previous_headings":"","what":"LOF one new point — lof.internal","title":"LOF one new point — lof.internal","text":"Compute LOF new point respect data set reference various values k. need pre-computed k_dist points reference data set.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/lof.internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LOF one new point — lof.internal","text":"","code":"lof.internal(new, set.ref, k_all, Tab.dist = NULL, Tab.id = NULL)"},{"path":"https://pbastide.github.io/abcgof/reference/lof.internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOF one new point — lof.internal","text":"new vector represents new point set.ref ensemble points reference data set  (row row : set.ref[j,] represents j_th point) k_all specify values k Tab.dist Tab.dist[,k] k-distance particles Tab.id Tab.id[,1:k] k-neighborhood particles ","code":""},{"path":"https://pbastide.github.io/abcgof/reference/lof.internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LOF one new point — lof.internal","text":"vector LOF values new point respect reference data set, k k_all.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"logistic transform — logistic","title":"logistic transform — logistic","text":"logistic transform","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logistic transform — logistic","text":"","code":"logistic(x, a = 0, b = 1)"},{"path":"https://pbastide.github.io/abcgof/reference/logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logistic transform — logistic","text":"x vector values lower bound b upper bound","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logistic transform — logistic","text":"transformed values","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logisticVec.html","id":null,"dir":"Reference","previous_headings":"","what":"logistic transform — logisticVec","title":"logistic transform — logisticVec","text":"logistic transform","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logisticVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logistic transform — logisticVec","text":"","code":"logisticVec(x, a = 0, b = rep(1, length(x)))"},{"path":"https://pbastide.github.io/abcgof/reference/logisticVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logistic transform — logisticVec","text":"x vector values lower bound b vector upper bound","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logisticVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logistic transform — logisticVec","text":"transformed values","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logit.html","id":null,"dir":"Reference","previous_headings":"","what":"logit transform — logit","title":"logit transform — logit","text":"logit transform","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logit transform — logit","text":"","code":"logit(x, a = 0, b = 1)"},{"path":"https://pbastide.github.io/abcgof/reference/logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logit transform — logit","text":"x vector values lower bound b upper bound","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logit transform — logit","text":"transformed values","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logitVec.html","id":null,"dir":"Reference","previous_headings":"","what":"logit transform — logitVec","title":"logit transform — logitVec","text":"logit transform","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logitVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logit transform — logitVec","text":"","code":"logitVec(x, a = 0, b = rep(1, length(x)))"},{"path":"https://pbastide.github.io/abcgof/reference/logitVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logit transform — logitVec","text":"x vector values lower bound b vector upper bound","code":""},{"path":"https://pbastide.github.io/abcgof/reference/logitVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logit transform — logitVec","text":"transformed values","code":""},{"path":"https://pbastide.github.io/abcgof/reference/meankNN.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean kNN for one new point — meankNN","title":"Mean kNN for one new point — meankNN","text":"Compute mean kNN new point respect data set reference various values k.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/meankNN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean kNN for one new point — meankNN","text":"","code":"meankNN(new, set.ref, k_all, ...)"},{"path":"https://pbastide.github.io/abcgof/reference/meankNN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean kNN for one new point — meankNN","text":"new vector represents new point set.ref ensemble points reference data set  (row row : set.ref[j,] represents j_th point) k_all specify values k ... arguments passed function (ignored).","code":""},{"path":"https://pbastide.github.io/abcgof/reference/meankNN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean kNN for one new point — meankNN","text":"vector mean kNN values new point respect reference data set, k k_all.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/norm_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize the reference table — norm_stats","title":"Normalize the reference table — norm_stats","text":"function applies norm function Ntrain columns training sumstat matrix. normalize column target sumstat matrices dividing norm: target[, j] = target[, j] / norm(sumstat[, j]) sumstat[, j] = sumstat[, j] / norm(sumstat[, j])","code":""},{"path":"https://pbastide.github.io/abcgof/reference/norm_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize the reference table — norm_stats","text":"","code":"norm_stats(target, sumstat, norm = sd)"},{"path":"https://pbastide.github.io/abcgof/reference/norm_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize the reference table — norm_stats","text":"target matrix observations, dimension Nobs x Nstats. sumstat matrix summary statistics training set, dimension Ntrain x Nstats. norm normalization function. Default sd.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/norm_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize the reference table — norm_stats","text":"list, normalized target sumstat matrices.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/postgfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior goodness of fit function — postgfit","title":"Posterior goodness of fit function — postgfit","text":"function likely DEPRECATED stable versions package. function performs prior Goodness Fit (GoF) test, checks whether can reject hypothesis target model particles sumstat matrix. works sub-sampling nb.replicate points localized subset reference table sumstat, comparing score target distribution scores calibration points.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/postgfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior goodness of fit function — postgfit","text":"","code":"postgfit(   target,   sumstat,   sumstat.replica,   nb.replicate = 100,   score = c(\"lof\", \"kNN\"),   k = c(2, 3, 5, 8, 14, 20),   k_range = range(k),   eps = 0.01,   norm = sd,   ncores = 1 )"},{"path":"https://pbastide.github.io/abcgof/reference/postgfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior goodness of fit function — postgfit","text":"target matrix observations, dimension Nobs x Nstats. sumstat matrix summary statistics training set, dimension Ntrain x Nstats. sumstat.replica matrix replicate summary statistics training set, dimension Ntrain x Nstats. line replicate summary statistic simulated parameters one used line reference table. nb.replicate number replicates draw training set calibration p value. score score use calling outliers. Can \"lof\", \"kNN\", . k kth-distance used calculate LOFs kNNs. k can vector contains multiple k values based score needs calculated. k_range vector min max values k using \"LOF max\" score (see Details). eps proportion data points used approximate posterior distribution reference table around observation point. Default 0.01. norm normalization function. Default sd. ncores number cores parallel computations.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/postgfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior goodness of fit function — postgfit","text":"score, list : score.calib matrix LOF scores calibration data (rows), possible value k. score.test matrix LOF scores test data (rows), possible value k. pval matrix p-values test data (rows), possible value k. n.ref number particles reference dataset (number rows sumstat). n.calib number particles used calibration (equal nb.replicate). k_range min max values k using \"LOF max\" score.","code":""},{"path":"https://pbastide.github.io/abcgof/reference/postgfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posterior goodness of fit function — postgfit","text":"Le Mailloux G., Bastide, P., Marin, J-M., Estoup, . (2024+), Goodness Fit Bayesian Generative Models Applications Population Genetics. Markus M. Breunig, Hans-Peter Kriegel, Raymond T. Ng, Jörg Sander. 2000. LOF: identifying density-based local outliers. SIGMOD Rec. 29, 2 (June 2000), 93–104. https://doi.org/10.1145/335191.335388","code":""},{"path":[]}]
